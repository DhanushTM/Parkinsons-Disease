# -*- coding: utf-8 -*-
"""Parkinson's Disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uUM_SyzmC46fQBF_xiF8XUGs4hZtxVM_
"""

#importing Dependecies
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score

# Data collection 
#and analysis
parkinsons_data = pd.read_csv('/content/parkinsons.csv')

#printing the first five rows of data frame
parkinsons_data.head()

#printing the last five rows of data frame
parkinsons_data.tail()

parkinsons_data.shape

parkinsons_data.info()

# checking for missing values
parkinsons_data.isnull().sum()

# getting some statistical methods about the data
parkinsons_data.describe()

# distribution of target variable
# 1--> has parkinson's disease
# 0--> does not have parkinson's disease
parkinsons_data['status'].value_counts()

# grouping the data based on the target variable
parkinsons_data.groupby('status').mean()

# data preprocessing
# seperating the features and target
x = parkinsons_data.drop(columns=['name','status'], axis=1)
y = parkinsons_data['status']

print(x)

print(y)

# splitting the data to training data and test data
X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=2)

print(x.shape, X_train.shape, X_test.shape)

# data standardization
scaler = StandardScaler()

scaler.fit(X_train)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

print(X_train)

# model training
# support vector machine model
model = svm.SVC(kernel='linear')

# training the svm model with the trainig data
model.fit(X_train, Y_train)

# evaluating model
# accuracy score on training data
X_train_prediction = model.predict(X_train)
train_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy score of trainig data : ',train_data_accuracy)

# accuracy score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy score of test data : ',test_data_accuracy)

# building a predictive system
input_data = (201.46400,210.56500,195.70800,0.00198,0.000010,0.00105,0.00115,0.00314,0.01194,0.10700,0.00586,0.00760,0.00957,0.01758,0.00135,31.73200,0.344252,0.742737,-7.777685,0.170183,2.447064,0.057610
)
# changing input data to a numpy array
input_data_as_numpy_array = np.array(input_data)

# reshape the numpy array
input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

# standardizing the data
standard_data = scaler.transform(input_data_reshape)

prediction = model.predict(standard_data)

print(prediction)

if(prediction[0]==0):
  print("The Person does not have Parkinson's Disease")
else:
  print("The Person has Parkinson's Disease")

